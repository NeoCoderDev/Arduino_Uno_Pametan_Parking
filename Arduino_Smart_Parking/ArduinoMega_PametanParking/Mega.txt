#include <LiquidCrystal_I2C.h>

#define servoPin 2

#include <U8g2lib.h>
#include <Servo.h> 



#define trigPin_3 43
#define echoPin_3 42








Servo ServoRampa;





int rxPin = 17; // RX2 pin na Arduino Mega
int txPin = 16; // TX2 pin na Arduino Mega



int IR_Ulaz = 6;
int IR_Izlaz = 7;

int ParkingMesta = 3; 
int ZauzetaMesta = 0;          

int Prvo_Stanje = 0;
int Drugo_Stanje = 0;

int piezoPin = 3; 

long distance;





long distance_2;

long distance_3;


int buttonUlaz = 4;

int buttonState = 0;  // Trenutno stanje tastera

int lastButtonState = 0;  // Prethodno stanje tastera

bool isOpen = false; 

bool carDetected = false;  
bool carDetected2 = false;  

const int AnalogWaterPin = A0;

const int SemaforCrvno_1 = 22;
const int SemaforZuto_1 = 23;
const int SemaforZeleno_1 = 24;


const int SemaforCrvno_2 = 38;
const int SemaforZuto_2 = 39;
const int SemaforZeleno_2 = 40;

//const int SenzorPlamena = A1;

const int PumpPin = A0; // Pin na koji je povezan prekidač
const int relayPin = A1;


const int VentilatorPin = A6;
const int ReleyPinFan = A7;

bool espConnected = false;  // Promenljiva koja prati status konekcije ESP8266


enum StanjeSemafora {
  CRVENO,
  ZELENO,
  BLINK_ZELENO,
  ZUTO_1,
  ZUTO_2
};

StanjeSemafora trenutnoStanje = CRVENO;

StanjeSemafora trenutnoStanje2 = ZELENO;

unsigned long prethodniMillis = 0;

unsigned long prethodniMillis2 = 0;

const long trajanjeCrvenog = 7000;  // Trajanje crvenog svetla u milisekundama
const long trajanjeZelenog = 7000;  // Trajanje zelenog svetla u milisekundama
const long trajanjeBlinkanja = 4000; // Trajanje blinkanja zelenog svetla u milisekundama
const long trajanjeZutog = 2000;    // Trajanje žutog svetla u milisekundama

unsigned long blinkMillis = 0;  // Vreme za blinkanje zelenog svetla
bool zelenoBlinkStanje = false; // Trenutno stanje blinkanja zelenog svetla
//------------------------------------------------------------------------------------------------------
bool zelenoBlinkStanje2 = false; // Trenutno stanje blinkanja zelenog svetla drugog semafora

unsigned long blinkMillis2 = 0;  // Vreme za blinkanje zelenog svetla drugog semafora


// Definišemo minimalnu i maksimalnu udaljenost (u centimetrima)
const int minDistance = 5;    // Minimalna udaljenost (najbliže senzoru)
const int maxDistance = 10;  // Maksimalna udaljenost (najdalje od senzora)

// Ako koristite ST7920 sa SPI interfejsom
U8G2_ST7920_128X64_F_SW_SPI u8g2(U8G2_R0, /* clock=*/ 13, /* data=*/ 11, /* CS=*/ 10, /* reset=*/ 8);

void setup()
 {
  Serial.begin(9600);    // Serijska komunikacija sa računarom
  Serial2.begin(115200); // Serijska komunikacija sa ESP8266 (RX2/TX2)
  Serial.println("Arduino Mega ready");

  Serial2.println("Are you there, ESP8266?"); // Šalji proveru na ESP8266

  pinMode(PumpPin, INPUT_PULLUP);
  pinMode(relayPin, OUTPUT);   
  digitalWrite(relayPin, LOW);       // Početno stanje releja je isključeno

  

  pinMode(VentilatorPin,INPUT_PULLUP);

  pinMode(ReleyPinFan, OUTPUT);
  digitalWrite(ReleyPinFan, LOW); 

 pinMode(buttonUlaz, INPUT_PULLUP);   


  pinMode(31, OUTPUT);  // Trig pin kao izlaz
  pinMode(30, INPUT);   // Echo pin kao ulaz

  pinMode(50, OUTPUT);  // Trig pin kao izlaz
  pinMode(51, INPUT);   // Echo pin kao ulaz


  pinMode(trigPin_3, OUTPUT);  // Trig pin kao izlaz
  pinMode(echoPin_3, INPUT);   // Echo pin kao ulaz
  u8g2.begin(); // Inicijalizacija displeja
  u8g2.setContrast(255); // Postavljanje maksimalnog kontrasta
  pinMode(IR_Ulaz, INPUT);
  pinMode(IR_Izlaz, INPUT);





  pinMode(SemaforCrvno_1,OUTPUT);
  pinMode(SemaforZuto_1,OUTPUT);
  pinMode(SemaforZeleno_1,OUTPUT);

  digitalWrite(SemaforCrvno_1, LOW);
  digitalWrite(SemaforZuto_1, LOW);
  digitalWrite(SemaforZeleno_1, LOW);

  pinMode(SemaforCrvno_2, OUTPUT);
  pinMode(SemaforZuto_2, OUTPUT);
  pinMode(SemaforZeleno_2, OUTPUT);

  digitalWrite(SemaforCrvno_2, LOW);
  digitalWrite(SemaforZuto_2, LOW);
  digitalWrite(SemaforZeleno_2, LOW);

  //pinMode(SenzorPlamena,INPUT);

   

  trenutnoStanje = CRVENO;
  prethodniMillis = millis();

  trenutnoStanje2 = ZELENO;
  prethodniMillis2 = millis();
    
  ServoRampa.attach(servoPin);
  ServoRampa.write(0);
}
void loop()
{
  // Provera da li postoji serijski unos sa ESP8266
  if (Serial2.available()) {
    String command = Serial2.readStringUntil('\n');
    Serial.print("Primljena komanda: ");
    Serial.println(command); // Ispisuje primljenu komandu za debagovanje

    // Obrada komandi za kontrolu pumpe
    if (command == "START_PUMP") {
      digitalWrite(relayPin, HIGH);  // Uključuje pumpu
      Serial.println("Pumpa je uključena.");
    } else if (command == "STOP_PUMP") {
      digitalWrite(relayPin, LOW);   // Isključuje pumpu
      Serial.println("Pumpa je isključena.");
    } else {
      Serial.println("Nepoznata komanda: " + command);
    }
  }
int buttonState = digitalRead(buttonUlaz);



int StanjePumpe = digitalRead(PumpPin); // Pročitaj stanje prekidača


  if (StanjePumpe == LOW) 
  {          // Ako je prekidač pritisnut (jer je pull-up)
    digitalWrite(relayPin, HIGH);    // Uključi relej (i pumpu)
  } 
  else 
  {
    digitalWrite(relayPin, LOW);     // Isključi relej (i pumpu)
  }

  int StanjeVentilatora = digitalRead(VentilatorPin); // Pročitaj stanje prekidača


  if(StanjeVentilatora == LOW)
  {
      digitalWrite(ReleyPinFan, HIGH);
  }
  else
  {
    digitalWrite(ReleyPinFan,LOW);
  }
//----------------------------------NIVO VODE------------------------------------------------------------------
int NivoVode = analogRead(AnalogWaterPin);


  u8g2.setCursor(0, 55);
  u8g2.print("Voda:  ");
  u8g2.print(NivoVode);
  u8g2.sendBuffer();  
  delay(100);

//-----------------------------------------PARKING SENZOR 1-----------------------------------------------------------
long distance = readUltrasonic(31, 30);
long distance_2 = readUltrasonic(50, 51);
  controlBuzzer(distance);
  delay(100); // Mala pauza između merenja

  controlBuzzer(distance_2);
  delay(100); // Mala pauza između merenja

  if (distance < 5) 
  {
    if (!carDetected) 
    {
      carDetected = true;  // Označi da je auto detektovan
      if (ParkingMesta > 0) 
      {
        ParkingMesta--;  // Smanji broj slobodnih parking mesta
        ZauzetaMesta++;
      }
    }
  }
  else 
  {
    if (carDetected)
    {
      carDetected = false;  // Resetuj detekciju kada auto ode
      ParkingMesta++;
      ZauzetaMesta--;
    }
  }

  
  if (distance_2 < 5) 
  {
    if (!carDetected2) 
    {
      carDetected2 = true;  // Označi da je auto detektovan
      if (ParkingMesta > 0) 
      {
        ParkingMesta--;  // Smanji broj slobodnih parking mesta
        ZauzetaMesta++;
      }
    }
  }
  else 
  {
    if (carDetected2)
    {
      carDetected2 = false;  // Resetuj detekciju kada auto ode
      ParkingMesta++;
      ZauzetaMesta--;
    }
  }
//-----------------------------------PARKING SENZOR 3-----------------------------------------------------
//---------------------------------------------------------------------------------
if(digitalRead (IR_Ulaz) == LOW && Prvo_Stanje==0) //------------------------------ULAZ SA PAKRINGA
{
    Prvo_Stanje=1;
}

if(digitalRead (IR_Izlaz) == LOW && Drugo_Stanje==0) //------------- IZLAZ SA PARKINGA
{

    Drugo_Stanje=1;
    if(Prvo_Stanje==0)
    {
      OtvoriRampu();
    }
    delay(1000);
}

if (buttonState != lastButtonState && Prvo_Stanje==1) 
{
    if (buttonState == LOW) 
    {  
          OtvoriRampu();
          isOpen = true;
    }
    isOpen = !isOpen;  // Promena stanja rampe
     delay(1000);
}
  lastButtonState = buttonState;  // Skladištenje trenutnog stanja tastera za sledeću iteraciju
  

//-----------------------------------------------
//---------------SPUŠTANJE RAMPE----------------------------
//-----------------------------------------------
if(Prvo_Stanje==1 && Drugo_Stanje==1)
{
    ZatvoriRampu();
    Prvo_Stanje=0, Drugo_Stanje=0;
}
//----------------------------------------------
  u8g2.clearBuffer();          // Brisanje bafera
  u8g2.setFont(u8g2_font_ncenB08_tr); // Postavljanje fonta
  u8g2.setCursor(0, 10);
  u8g2.print("Slob. mesta: ");
  u8g2.print(ParkingMesta);
  u8g2.setCursor(0, 24);
  u8g2.print("Zauz. mesta: ");
  u8g2.print(ZauzetaMesta);
//------------------------PARKINZI NA DISPLEJU
  u8g2.setCursor(0, 35);
  u8g2.print("P1: ");
  u8g2.print(distance);
  
  u8g2.setCursor(55, 35);
  u8g2.print("P2: ");
  u8g2.print(distance_2);

  u8g2.setCursor(55, 45);
  u8g2.print("P3: ");
  u8g2.print(distance_3);
//------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------
  /*int StanjeVatre = HIGH;
  StanjeVatre = analogRead(SenzorPlamena);
  Serial.println(SenzorPlamena);    

  if(StanjeVatre  < 60)
  {
      u8g2.setCursor(60, 55);
      u8g2.print("POZAR");
      u8g2.sendBuffer();           // Slanje bafera na displej
      tone(piezoPin, 1500);
  }
  else
  {
    noTone(piezoPin);
  }*/
  Semafori();
}


//----------------------------------------------------------------------VOIDI 
void Semafori()
{
  unsigned long trenutniMillis = millis();
unsigned long trenutniMillis2 = millis();

  switch (trenutnoStanje)
  {
   case CRVENO:
      digitalWrite(SemaforCrvno_1, HIGH);
      digitalWrite(SemaforZuto_1, LOW);
      digitalWrite(SemaforZeleno_1, LOW);
      if (trenutniMillis - prethodniMillis >= trajanjeCrvenog) {
        trenutnoStanje = ZUTO_1;
        prethodniMillis = trenutniMillis;
      }
      break;
    case ZUTO_1:
      digitalWrite(SemaforCrvno_1, LOW);
      digitalWrite(SemaforZuto_1, HIGH);
      digitalWrite(SemaforZeleno_1, LOW);
      if (trenutniMillis - prethodniMillis >= trajanjeZutog) {
        trenutnoStanje = ZELENO;
        prethodniMillis = trenutniMillis;
      }
      break;
    case ZELENO:
      digitalWrite(SemaforCrvno_1, LOW);
      digitalWrite(SemaforZuto_1, LOW);
      digitalWrite(SemaforZeleno_1, HIGH);
      if (trenutniMillis - prethodniMillis >= trajanjeZelenog) {
        trenutnoStanje = BLINK_ZELENO;
        prethodniMillis = trenutniMillis;
        blinkMillis = trenutniMillis;
      }
      break;

    case BLINK_ZELENO:
      if (trenutniMillis - blinkMillis >= 500) {
        blinkMillis = trenutniMillis;
        zelenoBlinkStanje = !zelenoBlinkStanje;
        digitalWrite(SemaforZeleno_1, zelenoBlinkStanje ? HIGH : LOW);
      }
      if (trenutniMillis - prethodniMillis >= trajanjeBlinkanja) {
        trenutnoStanje = ZUTO_2;
        prethodniMillis = trenutniMillis;
      }
      break;

    case ZUTO_2:
      digitalWrite(SemaforCrvno_1, LOW);
      digitalWrite(SemaforZuto_1, HIGH);
      digitalWrite(SemaforZeleno_1, LOW);
      if (trenutniMillis - prethodniMillis >= trajanjeZutog) {
        trenutnoStanje = CRVENO;
        prethodniMillis = trenutniMillis;
      }
      break;
  }

  switch (trenutnoStanje2) {
    case ZELENO:
      digitalWrite(SemaforCrvno_2, LOW);
      digitalWrite(SemaforZuto_2, LOW);
      digitalWrite(SemaforZeleno_2, HIGH);
      if (trenutniMillis2 - prethodniMillis2 >= trajanjeZelenog) {
        trenutnoStanje2 = BLINK_ZELENO;
        prethodniMillis2 = trenutniMillis2;
        blinkMillis2 = trenutniMillis2;
      }
      break;

    case BLINK_ZELENO:
      if (trenutniMillis2 - blinkMillis2 >= 500) {
        blinkMillis2 = trenutniMillis2;
        zelenoBlinkStanje2 = !zelenoBlinkStanje2;
        digitalWrite(SemaforZeleno_2, zelenoBlinkStanje2 ? HIGH : LOW);
      }
      if (trenutniMillis2 - prethodniMillis2 >= trajanjeBlinkanja) {
        trenutnoStanje2 = ZUTO_1;
        prethodniMillis2 = trenutniMillis2;
      }
      break;

    case ZUTO_1:
      digitalWrite(SemaforCrvno_2, LOW);
      digitalWrite(SemaforZuto_2, HIGH);
      digitalWrite(SemaforZeleno_2, LOW);
      if (trenutniMillis2 - prethodniMillis2 >= trajanjeZutog) {
        trenutnoStanje2 = CRVENO;
        prethodniMillis2 = trenutniMillis2;
      }
      break;

    case CRVENO:
      digitalWrite(SemaforCrvno_2, HIGH);
      digitalWrite(SemaforZuto_2, LOW);
      digitalWrite(SemaforZeleno_2, LOW);
      if (trenutniMillis2 - prethodniMillis2 >= trajanjeCrvenog) {
        trenutnoStanje2 = ZUTO_2;
        prethodniMillis2 = trenutniMillis2;
      }
      break;
    case ZUTO_2:
      digitalWrite(SemaforCrvno_2, LOW);
      digitalWrite(SemaforZuto_2, HIGH);
      digitalWrite(SemaforZeleno_2, LOW);
      if (trenutniMillis2 - prethodniMillis2 >= trajanjeZutog) {
        trenutnoStanje2 = ZELENO;
        trenutniMillis2 = trenutniMillis2;
      }
      break;
  }
}

// Funkcija za spuštanje rampe
void OtvoriRampu()
{
  slowMove(ServoRampa, 0, 90, 10); 

}
void ZatvoriRampu() 
{
  slowMove(ServoRampa, 90, 0, 10); 
}
void PunParking()
{
  u8g2.setFont(u8g2_font_ncenB08_tr); // Postavljanje fonta
  u8g2.setCursor(0, 50);
  u8g2.print("Parking je pun!");
  u8g2.sendBuffer();           // Slanje bafera na displej
  tone(piezoPin, 255); 
  delay(1000);  // Pauza od 1 sekunde
  noTone(piezoPin);
}
//----------------------------------
//---------------------------------------

// Funkcija za sporo pomeranje servo motora
void slowMove(Servo &servo, int start, int end, int delayTime) 
{
  if (start < end) {
    for (int pos = start; pos <= end; pos++) {
      servo.write(pos);  // Postavljanje pozicije servo motora
      delay(delayTime);  // Pauza za usporavanje kretanja
    }
  } else {
    for (int pos = start; pos >= end; pos--) {
      servo.write(pos);  // Postavljanje pozicije servo motora
      delay(delayTime);  // Pauza za usporavanje kretanja
    }
  }
}
long readUltrasonic(int trigPin, int echoPin) 
{
  // Postavi trig pin na LOW i sačekaj kratko
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);

  // Zatim trig pin postavi na HIGH na 10 mikrosekundi
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Očitaj trajanje pulse-a sa echo pin-a
  long duration = pulseIn(echoPin, HIGH);

  // Izračunaj udaljenost na osnovu trajanja pulse-a
  long distance = (duration * 0.034) / 2;  // brzina zvuka: 0.034 cm/us

  return distance;
}
void controlBuzzer(long distance) {
  if (distance < 3) { 
    int frequency = map(distance, 0, 3, 2555, 155); 
    tone(piezoPin, frequency, 100); 
  } else {
    noTone(piezoPin);
  }
}
//----------------------------------------------------------------------------------------------------------------
//-----------------------------------------------NE FUNKCIONIŠE---------------------------------------------------
//----------------------------------------------------------------------------------------------------------------
void ProveraKonekcije()
{
  if (Serial2.available()) {
    String command = Serial2.readStringUntil('\n');
    Serial.print("Received command: ");
    Serial.println(command); 

    if (command == "RESERVE1") {
      reserveParking(1);  
    } else if (command == "RESERVE2") {
      reserveParking(2);  
    } else if (command == "RESERVE3") {
      reserveParking(3); 
    }
  }
  if(espConnected == true)
  {
    u8g2.setCursor(0, 65);
    u8g2.print("ESP: OK");                 
    u8g2.sendBuffer();
  }
  else
  {
      u8g2.setCursor(0, 65);
      u8g2.print("ESP: NO");                 
      u8g2.sendBuffer();
  } 
}
void reserveParking(int spotNumber) {
  if (ParkingMesta > 0) { 
    ParkingMesta--;        
    ZauzetaMesta++;      
    
    Serial.print("Parking spot ");
    Serial.print(spotNumber);
    Serial.println(" reserved!");

    Serial.print("Slobodnih mesta: ");
    Serial.println(ParkingMesta);
    Serial.print("Zauzetih mesta: ");
    Serial.println(ZauzetaMesta);
  } else {
    Serial.println("Nema slobodnih parking mesta!");
  }
}
//----------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------
void updateLCD() {
  u8g2.clearBuffer(); 
  u8g2.setFont(u8g2_font_ncenB08_tr); 
  u8g2.setCursor(0, 10);
  u8g2.print("Slob. mesta: ");
  u8g2.print(ParkingMesta);
  u8g2.setCursor(0, 24);
  u8g2.print("Zauz. mesta: ");
  u8g2.print(ZauzetaMesta);
  u8g2.sendBuffer();
}
